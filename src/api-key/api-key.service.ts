import {
  BadRequestException,
  ConflictException,
  HttpException,
  HttpStatus,
  Injectable,
} from '@nestjs/common';
import { BulkCreateApiKeyDto, CreateApiKeyDto } from './dto/apiKey.dto';
import {
  ApiKey,
  ApiKeyDocument,
  ApiKeyLiMitType,
} from './schemas/apiKey.schema';
import { Model, Types } from 'mongoose';
import { InjectModel } from '@nestjs/mongoose';
import { User } from 'src/user/schemas/user.schema';
import { ROLES } from 'src/common/constants';

@Injectable()
export class ApiKeyService {
  constructor(
    @InjectModel(ApiKey.name) private readonly apiKeyModel: Model<ApiKey>,
    @InjectModel(User.name) private readonly userModel: Model<User>,
  ) {}
  async create(dto: CreateApiKeyDto, user: User) {
    try {
      console.log(
        'üîç ~ create ~ tytb2-backend/src/api-key/api-key.service.ts:25 ~ dto:',
        dto,
      );
      const isAdmin = user.role === ROLES.ADMIN;
      const isAdminOverride = isAdmin && dto.userId;

      // Ki·ªÉm tra v√† chuy·ªÉn ƒë·ªïi ownerId
      let ownerId: Types.ObjectId;
      if (isAdminOverride) {
        if (!dto.userId) {
          throw new BadRequestException(
            'userId is required for admin override',
          );
        }
        if (!Types.ObjectId.isValid(dto.userId)) {
          throw new BadRequestException('Invalid userId format');
        }
        // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa userId
        const existingUser = await this.userModel.findById(dto.userId).exec();

        if (!existingUser) {
          throw new BadRequestException(
            `User with ID '${dto.userId}' does not exist`,
          );
        }
        ownerId = new Types.ObjectId(dto.userId);
      } else {
        // Gi·∫£ s·ª≠ user._id ƒë√£ l√† Types.ObjectId
        if (!user._id) {
          throw new BadRequestException('User _id is missing');
        }
        ownerId = user._id;
      }

      // Ki·ªÉm tra aiModelId
      if (!dto.aiModelId || !Types.ObjectId.isValid(dto.aiModelId)) {
        throw new BadRequestException('Invalid aiModelId format');
      }

      const payload: Partial<ApiKey> = {
        key: dto.key,
        userId: ownerId,
        limitType: dto.limitType ?? ApiKeyLiMitType.ACTIVE,
        totalToken: dto.totalToken ?? 0,
        isAdminOwner: isAdmin,
        rentAt: isAdmin ? new Date() : undefined,
        status: true,
        totalUsed: 0,
        usedDay: 0,
        isUsed: false,
        aiModelId: new Types.ObjectId(dto.aiModelId),
      };

      const doc = new this.apiKeyModel(payload);
      return await doc.save();
    } catch (error) {
      console.log('MongoDB error:', error.message);
      if (error.code === 11000) {
        throw new ConflictException(
          `Duplicate value '${dto.key}' for field 'key'`,
        );
      }
      throw error;
    }
  }

  /**
   * T·∫°o nhi·ªÅu API key c√πng m·ªôt l√∫c t·ª´ danh s√°ch m√† kh√¥ng ph·ª• thu·ªôc v√†o h√†m create.
   * @param dto    DTO ch·ª©a m·∫£ng c√°c API key c·∫ßn t·∫°o.
   * @param user   Th√¥ng tin ng∆∞·ªùi d√πng ƒëang th·ª±c hi·ªán request.
   * @returns      K·∫øt qu·∫£ t·∫°o API key v·ªõi danh s√°ch th√†nh c√¥ng v√† l·ªói.
   */
  async bulkCreate(dto: BulkCreateApiKeyDto, user: User) {
    try {
      console.log(
        'üîç ~ bulkCreate ~ tytb2-backend/src/api-key/api-key.service.ts ~ dto:',
        dto,
      );

      const isAdmin = user.role === ROLES.ADMIN;
      const createdKeys: ApiKeyDocument[] = [];
      const errors: { key: string; error: string }[] = [];

      // B∆∞·ªõc 1: Thu th·∫≠p t·∫•t c·∫£ keys ƒë·ªÉ ki·ªÉm tra tr√πng l·∫∑p
      const allKeys = dto.apiKeys.map((apiKey) => apiKey.key);

      // B∆∞·ªõc 2: Ki·ªÉm tra keys tr√πng l·∫∑p trong database
      const existingKeys = await this.apiKeyModel
        .find({
          key: { $in: allKeys },
        })
        .exec();

      const existingKeyMap = new Map();
      existingKeys.forEach((key) => {
        existingKeyMap.set(key.key, true);
      });

      // B∆∞·ªõc 3: T·∫°o danh s√°ch userIds c·∫ßn ki·ªÉm tra (n·∫øu admin g·ª≠i userId)
      const userIds = dto.apiKeys
        .filter((item) => isAdmin && item.userId)
        .map((item) => item.userId as string); // Type assertion ·ªü ƒë√¢y

      const uniqueUserIds = [...new Set(userIds)];
      let userMap = new Map();

      // B∆∞·ªõc 4: Ki·ªÉm tra t·ªìn t·∫°i c·ªßa userIds (n·∫øu c√≥)
      if (uniqueUserIds.length > 0) {
        // L·ªçc ch·ªâ nh·ªØng userId h·ª£p l·ªá
        const validUserIds = uniqueUserIds.filter(
          (id) => id !== undefined && Types.ObjectId.isValid(id),
        );

        if (validUserIds.length > 0) {
          const existingUsers = await this.userModel
            .find({
              _id: { $in: validUserIds.map((id) => new Types.ObjectId(id)) },
            })
            .exec();

          existingUsers.forEach((user) => {
            userMap.set(user._id.toString(), user);
          });
        }
      }

      // B∆∞·ªõc 5: X·ª≠ l√Ω t·ª´ng apiKey trong m·∫£ng
      for (const apiKeyDto of dto.apiKeys) {
        try {
          // Ki·ªÉm tra key ƒë√£ t·ªìn t·∫°i
          if (existingKeyMap.has(apiKeyDto.key)) {
            errors.push({
              key: apiKeyDto.key,
              error: `Duplicate API key '${apiKeyDto.key}' already exists`,
            });
            continue;
          }

          // X√°c ƒë·ªãnh userId
          let ownerId: Types.ObjectId;
          if (isAdmin && apiKeyDto.userId) {
            // Tr∆∞·ªùng h·ª£p admin t·∫°o key cho user kh√°c
            if (!Types.ObjectId.isValid(apiKeyDto.userId)) {
              errors.push({
                key: apiKeyDto.key,
                error: `Invalid userId format: '${apiKeyDto.userId}'`,
              });
              continue;
            }

            // Ki·ªÉm tra user t·ªìn t·∫°i
            if (!userMap.has(apiKeyDto.userId)) {
              errors.push({
                key: apiKeyDto.key,
                error: `User with ID '${apiKeyDto.userId}' does not exist`,
              });
              continue;
            }

            // ·ªû ƒë√¢y ch√∫ng ta ƒë√£ ki·ªÉm tra apiKeyDto.userId kh√¥ng ph·∫£i undefined
            ownerId = new Types.ObjectId(apiKeyDto.userId as string);
          } else {
            // User th√¥ng th∆∞·ªùng t·∫°o key cho ch√≠nh h·ªç
            if (!user._id) {
              errors.push({
                key: apiKeyDto.key,
                error: 'User _id is missing',
              });
              continue;
            }
            ownerId = user._id;
          }

          // Ki·ªÉm tra aiModelId
          if (
            !apiKeyDto.aiModelId ||
            !Types.ObjectId.isValid(apiKeyDto.aiModelId)
          ) {
            errors.push({
              key: apiKeyDto.key,
              error: 'Invalid aiModelId format',
            });
            continue;
          }

          // T·∫°o document API key m·ªõi
          const newApiKey: Partial<ApiKey> = {
            key: apiKeyDto.key,
            userId: ownerId,
            limitType: apiKeyDto.limitType ?? ApiKeyLiMitType.ACTIVE,
            totalToken: apiKeyDto.totalToken ?? 0,
            isAdminOwner: isAdmin,
            rentAt: isAdmin ? new Date() : undefined,
            status: true,
            totalUsed: 0,
            usedDay: 0,
            isUsed: false,
            aiModelId: new Types.ObjectId(apiKeyDto.aiModelId),
          };

          const apiKeyDoc = new this.apiKeyModel(newApiKey);
          const savedApiKey = await apiKeyDoc.save();
          createdKeys.push(savedApiKey);

          // Th√™m key m·ªõi v√†o map ƒë·ªÉ ki·ªÉm tra tr√πng l·∫∑p cho c√°c key ti·∫øp theo
          existingKeyMap.set(apiKeyDto.key, true);
        } catch (error) {
          errors.push({
            key: apiKeyDto.key,
            error: error.message || String(error),
          });
        }
      }

      // Tr·∫£ v·ªÅ k·∫øt qu·∫£
      return {
        success: createdKeys.length,
        total: dto.apiKeys.length,
        createdKeys,
        errors: errors.length > 0 ? errors : [],
      };
    } catch (error) {
      console.log('MongoDB error:', error.message);
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch API key kh·∫£ d·ª•ng theo userId.
   * @param userId    ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn l·∫•y API key.
   * @returns         Danh s√°ch c√°c API key kh·∫£ d·ª•ng.
   */
  async getAvailableApiKey(userId: string): Promise<ApiKey[]> {
    try {
      const availableKeys = await this.apiKeyModel
        .find({
          userId: userId,
          status: true,
          isUsed: false,
          limitType: ApiKeyLiMitType.ACTIVE,
        })
        .exec();

      return availableKeys;
    } catch (error) {
      console.log('MongoDB error:', error.message);
      throw new HttpException(
        'Failed to fetch available API keys',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }
}
